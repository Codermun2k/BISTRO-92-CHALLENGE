const express = require('express');
const redis = require('redis');
const { Pool } = require('pg');
const app = express();
app.use(express.json());

const redisClient = redis.createClient();
const pool = new Pool({ user: 'postgres', database: 'bistro92', password: 'your_password' });

app.post('/api/orders', async (req, res) => {
  const { table_id, items, user_id, idempotency_key } = req.body;
  
  // Check idempotency
  const exists = await redisClient.get(`idempotency:${idempotency_key}`);
  if (exists) return res.status(200).json(JSON.parse(exists));

  try {
    const client = await pool.connect();
    await client.query('BEGIN');
    
    const orderResult = await client.query(
      'INSERT INTO Orders (table_id, user_id, status, order_time, total_amount, version) VALUES ($1, $2, $3, $4, $5, $6) RETURNING order_id',
      [table_id, user_id, 'pending', new Date(), items.reduce((sum, i) => sum + i.quantity * 10, 0), 1]
    );
    const order_id = orderResult.rows[0].order_id;

    for (const item of items) {
      await client.query(
        'INSERT INTO Order_Items (order_id, item_id, quantity, customizations) VALUES ($1, $2, $3, $4)',
        [order_id, item.item_id, item.quantity, item.customizations]
      );
    }

    await client.query('COMMIT');
    const response = { order_id, status: 'pending', order_time: new Date(), total_amount: items.reduce((sum, i) => sum + i.quantity * 10, 0) };
    
    await redisClient.setEx(`idempotency:${idempotency_key}`, 24 * 60 * 60, JSON.stringify(response));
    res.status(201).json(response);
  } catch (err) {
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Server error' });
  }
});

app.listen(3000, () => console.log('API running on port 3000'));
